// Code generated by MockGen. DO NOT EDIT.
// Source: D:/GoCode/projects/douyin-mall-microservice/rpc_gen/kitex_gen/product/productcatalogservice/client.go
//
// Generated by this command:
//
//	mockgen.exe -source=D:/GoCode/projects/douyin-mall-microservice/rpc_gen/kitex_gen/product/productcatalogservice/client.go -destination=D:/GoCode/projects/douyin-mall-microservice/app/cart/mocks/product_client_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	product "github.com/All-Done-Right/douyin-mall-microservice/rpc_gen/kitex_gen/product"
	callopt "github.com/cloudwego/kitex/client/callopt"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// DeleteProducts mocks base method.
func (m *MockClient) DeleteProducts(ctx context.Context, Req *product.DeleteProductsReq, callOptions ...callopt.Option) (*product.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProducts", varargs...)
	ret0, _ := ret[0].(*product.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProducts indicates an expected call of DeleteProducts.
func (mr *MockClientMockRecorder) DeleteProducts(ctx, Req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProducts", reflect.TypeOf((*MockClient)(nil).DeleteProducts), varargs...)
}

// GetProduct mocks base method.
func (m *MockClient) GetProduct(ctx context.Context, Req *product.GetProductReq, callOptions ...callopt.Option) (*product.GetProductResp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProduct", varargs...)
	ret0, _ := ret[0].(*product.GetProductResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockClientMockRecorder) GetProduct(ctx, Req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockClient)(nil).GetProduct), varargs...)
}

// InsertProducts mocks base method.
func (m *MockClient) InsertProducts(ctx context.Context, Req *product.InsertProductsReq, callOptions ...callopt.Option) (*product.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertProducts", varargs...)
	ret0, _ := ret[0].(*product.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertProducts indicates an expected call of InsertProducts.
func (mr *MockClientMockRecorder) InsertProducts(ctx, Req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProducts", reflect.TypeOf((*MockClient)(nil).InsertProducts), varargs...)
}

// ListProducts mocks base method.
func (m *MockClient) ListProducts(ctx context.Context, Req *product.ListProductsReq, callOptions ...callopt.Option) (*product.ListProductsResp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProducts", varargs...)
	ret0, _ := ret[0].(*product.ListProductsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockClientMockRecorder) ListProducts(ctx, Req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockClient)(nil).ListProducts), varargs...)
}

// SearchProducts mocks base method.
func (m *MockClient) SearchProducts(ctx context.Context, Req *product.SearchProductsReq, callOptions ...callopt.Option) (*product.SearchProductsResp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchProducts", varargs...)
	ret0, _ := ret[0].(*product.SearchProductsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProducts indicates an expected call of SearchProducts.
func (mr *MockClientMockRecorder) SearchProducts(ctx, Req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProducts", reflect.TypeOf((*MockClient)(nil).SearchProducts), varargs...)
}

// UpdateProducts mocks base method.
func (m *MockClient) UpdateProducts(ctx context.Context, Req *product.UpdateProductsReq, callOptions ...callopt.Option) (*product.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProducts", varargs...)
	ret0, _ := ret[0].(*product.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProducts indicates an expected call of UpdateProducts.
func (mr *MockClientMockRecorder) UpdateProducts(ctx, Req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProducts", reflect.TypeOf((*MockClient)(nil).UpdateProducts), varargs...)
}
